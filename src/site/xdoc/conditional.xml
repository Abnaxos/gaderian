<?xml version="1.0"?>
<!--
   Copyright 2004, 2005, 2006 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Conditional Contributions</title>
  </properties>

  <body>

    <section name="Conditional Contributions">

    <p>
      In certain cases, it is desirable to <em>conditionally contribute</em> to a configuration point, or to a
      service point. One way of doing this is to factor the contributions into their own module, and control whether that
      module (and its descriptor) is on the classpath at runtime. This can be cumbersome, however.
    </p>

    <p>
      A second method is to mark certain contributions (<a href="descriptor.html#contribution">&lt;contribution&gt;</a>, <a href="descriptor.html#implementation">&lt;implementation&gt;</a>, and <a href="descriptor.html#sub-module">&lt;sub-module&gt;</a> elements) as
      conditional, using the <code>if</code> attribute.
    </p>

    <p>
      When the <code>if</code> attribute is non-null, it is evaluated as a <em>conditional expression</em>.  If the expression
      evaluates to true, then the contribution is used.  If false, the the contribution is silently discarded.  The expression
      evaluation occurs while the Registry is being constructed.
    </p>

    <p>
      This mechanism allows you to test for certain conditions, such as the presense of a
      particular class or a particular JVM system property.  These basic conditions can be combined with
      and, or and not operators, and parenthesis to control order of evaluation.
    </p>

        <p>Conditions that can currently be evaluated are:</p>
        
        <ul>
            <li><a href="#Class_Keyword">class</a></li>
            <li><a href="#Property_Keyword">property</a></li>
            <li><a href="#OS_Keyword">os</a></li>
        </ul>

        <subsection name="Syntax">
    <p>
      The format for conditional expressions is:
    </p>

<source>
expression := <em>term</em> <code>or</code> <em>expression</em>
           := <em>term</em> <code>and</code> <em>expression</em>
           := <em>term</em>

term       := ( <em>expression</em> )
           := <code>not</code> ( <em>expression</em> )
           := <code><a href="#Property_Keyword">property</a></code> <em>symbol</em>
           := <code><a href="#Class_Keyword">class</a></code> <em>symbol</em>
           := <code><a href="#OS_Keyword">os</a></code> <em>symbol</em>
</source>

<p>
The keywords ("and", "or", "not", "property", "class", "os") are <em>not</em> case sensitive.  Symbols are Java identifiers and their value depend on the keyword preceding them; they are either JVM system properties, fully qualified Java class names or a specific keyword enumeration. In addition, they
may contain the dash character.  Whitespace is ignored.
</p>
            <h4>Examples</h4>
<source>
"class java.lang.String and not (property acme)"
</source>
<source>
"not (class java.lang.String)"
</source>
<source>
"os LINUX"
</source>

        </subsection>

        <subsection name="Property Keyword">
            <p>The <code>property</code> keyword treats its symbol as a JVM system property, as with <code>Boolean.getBoolean()</code>.</p>
        </subsection>

        <subsection name="Class Keyword">
            <p>The <code>class</code> keyword treats its symbol as a Java class name, evaluating to true if such a class exists.</p>

            <p>For example, the expression <code>class org.springframework.beans.factory.BeanFactory</code> would evaluate to true if the BeanFactory
              class was on the classpath.</p>

        </subsection>


        <subsection name="OS Keyword">
            <p>
            The <code>os</code> keyword treats its symbol as an enumeration of operating system types, evaluating to true if the JVM
                reported operating system type matches the specified type.  The operating system type is internally resolved using
                the 'os.name' system property.   The possible values for this symbol are listed below.
            </p>
                    <table>
                        <thead><tr><th>Symbol Value</th><th>Operating System</th></tr></thead>
                        <tbody>
                            <tr><td>LINUX</td><td>Linux based</td></tr>
                            <tr><td>WINDOWS</td><td>Microsoft based</td></tr>
                            <tr><td>AIX</td><td>IBM AIX based</td></tr>
                            <tr><td>SUNOS</td><td>Sun OS (Solaris) based</td></tr>
                            <tr><td>MAC</td><td>Apple Macintosh based (Mac/Darwin)</td></tr>
                        </tbody>
                    </table>
        </subsection>

    </section>

  </body>

</document>
