<?xml version="1.0"?>
<!--
   Copyright 2004, 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>Bootstrapping the Registry</title>
  </properties>
  <body>

    <section name="Bootstrapping the Registry">
    <p>Before you can access the configuration points and services defined in
      your application's module deployment descriptors, you need a registry; here we'll
      describe how to construct the registry.</p>
    <p>The key class here is <a href="gaderian/apidocs/org/ops4j/gaderian/impl/RegistryBuilder.html">RegistryBuilder</a>, which contains code for
      locating and parsing the module deployment descriptors and constructing a
      registry from the combined data. The descriptors are all found on the class path; they'll include
      the descriptors for Gaderian itself with descriptors packaged into your application's JARs.
      </p>

        <div class="frame note">
            <div class="label">Note</div>
            <div class="content">
                As Gaderian grows in popularity, we may start to see
                third party frameworks come bundled with
                Gaderian module deployment descriptors ... but it's too soon for that, now.
            </div>
        </div>
    <p>Let's examine how all this comes together. The layout of the project is
      shown below.</p>
    <img src="images/Bootstrap-ProjectLayout.png" alt="[Project Layout]"/>

    </section>

    <section name="Service Interfaces and Implementations">
      <p>The first step is to define the service interface:</p>
      <source>
package gaderian.examples;

public interface Adder
{
    public int add(int arg0, int arg1);
}</source>
      <p>Next we need an implementation for that service:</p>
      <source>
package gaderian.examples.impl;

import gaderian.examples.Adder;

public class AdderImpl implements Adder
{
  public int add(int arg0, int arg1)
  {
    return arg0 + arg1;
  }

}</source>

    <p>
    The example includes three additional interfaces and matching implementations:
    for a Subtracter, Multiplier, Divider, and lastly, a Calculator that combines them:
    </p>

    <source>
package gaderian.examples;

public interface Calculator extends Adder, Subtracter, Multiplier, Divider
{

}
</source>

<p>
The Calculator implementation will require some wiring; it expects that each of the other four
services (Adder, Subtracter, Multiplier and Divider) will be plugged into it:
</p>

<source>
package gaderian.examples.impl;

import gaderian.examples.Adder;
import gaderian.examples.Calculator;
import gaderian.examples.Divider;
import gaderian.examples.Multiplier;
import gaderian.examples.Subtracter;

public class CalculatorImpl implements Calculator
{
  private Adder _adder;
  private Subtracter _subtracter;
  private Multiplier _multiplier;
  private Divider _divider;

  public void setAdder(Adder adder)
  {
    _adder = adder;
  }

  public void setDivider(Divider divider)
  {
    _divider = divider;
  }

  public void setMultiplier(Multiplier multiplier)
  {
    _multiplier = multiplier;
  }

  public void setSubtracter(Subtracter subtracter)
  {
    _subtracter = subtracter;
  }

  public int add(int arg0, int arg1)
  {
    return _adder.add(arg0, arg1);
  }

  public int subtract(int arg0, int arg1)
  {
    return _subtracter.subtract(arg0, arg1);
  }

  public int multiply(int arg0, int arg1)
  {
    return _multiplier.multiply(arg0, arg1);
  }

  public int divide(int arg0, int arg1)
  {
    return _divider.divide(arg0, arg1);
  }
}
</source>

</section>

  <section name="Module Deployment Descriptor">
      <p>Finally, we need the Gaderian module deployment descriptor, <code>
        module.xml</code>.</p>

      <p>
      The module descriptor creates each of the services in terms of
      an interface, and an implementation. In addition, each service gets its
      own logging interceptor.
      </p>
      <source><![CDATA[
<?xml version="1.0"?>
<module id="gaderian.examples" version="1.0.0" package="gaderian.examples">
  <service-point id="Adder" interface="Adder">
    <create-instance class="impl.AdderImpl"/>
    <interceptor service-id="gaderian.LoggingInterceptor"/>
  </service-point>

  <service-point id="Subtracter" interface="Subtracter">
    <create-instance class="impl.SubtracterImpl"/>
    <interceptor service-id="gaderian.LoggingInterceptor"/>
  </service-point>

  <service-point id="Multiplier" interface="Multiplier">
    <create-instance class="impl.MultiplierImpl"/>
    <interceptor service-id="gaderian.LoggingInterceptor"/>
  </service-point>

  <service-point id="Divider" interface="Divider">
    <create-instance class="impl.DividerImpl"/>
    <interceptor service-id="gaderian.LoggingInterceptor"/>
  </service-point>

  <service-point id="Calculator" interface="Calculator">
    <invoke-factory>
      <!-- Autowires service properties based on interface! -->
      <construct class="impl.CalculatorImpl"/>
    </invoke-factory>
    <interceptor service-id="gaderian.LoggingInterceptor"/>
  </service-point>

</module>]]></source>
      <p>Here we've chosen to have the module id, <code>gaderian.examples</code>,
      match the package name but that is not an absolute requirement.</p>

      <p>
      The interesting part is the use of the <a href="gaderian/BuilderFactory.html">gaderian.BuilderFactory</a> (through
      <a href="descriptor.html#invoke-factory">&lt;invoke-factory&gt;</a>) to construct the Calculator service and connect it to the
      other four services.
      </p>
    </section>
    <section name="Building the Registry">
      <p>Before your code can access any services (or configuration points), it
        must construct the <a href="gaderian/apidocs/org/ops4j/gaderian/Registry.html">Registry</a>.  The Registry is the application's gateway to the services
        and configurations managed by Gaderian.</p>
      <source>
package gaderian.examples;ogaderian.gaderian.gaderian.Registry;
import org.ops4j.gaderian.impl.RegistryBuilder;

public class Main
{
  public static void main(String[] args)
  {
    int arg0 = Integer.parseInt(args[0]);
    int arg1 = Integer.parseInt(args[1]);

    Registry registry = RegistryBuilder.constructDefaultRegistry();

    Calculator c =
      (Calculator) registry.getService(Calculator.class);

    System.out.println("Inputs " + arg0 + " and " + arg1);

    System.out.println("Add   : " + c.add(arg0, arg1));
    System.out.println("Subtract: " + c.subtract(arg0, arg1));
    System.out.println("Multiply: " + c.multiply(arg0, arg1));
    System.out.println("Divide  : " + c.divide(arg0, arg1));
  }
}
</source>
<p><a href="gaderian/apidocs/org/ops4j/gaderian/impl/RegistryBuilder.html">RegistryBuilder</a> contains a static method for constructing a Registry, which
  is suitable for most situations.</p>
      <p>Now that we have the registry, we can use the Calculator
        interface as a key for finding the Calculator
        implementation.  In real applications, where there will often
        be multiple services implementing
        the same interface, we would have to specify a fully qualified service id as well.</p>
      <p>Using the reference to the Calculator service, we can finally invoke the
        <code>add()</code>, <code>subtract()</code>, <code>multiply()</code>
        and <code>divide()</code> methods.</p>
    </section>
    <section name="Building the Example">
      <p>Building and running the example using <a href="http://ant.apache.org/">Ant</a> is a snap; all the details
        are in the <code>build.xml</code>:</p>
      <source><![CDATA[
<?xml version="1.0"?>

<project name="Gaderian Adder Example" default="jar">

  <property name="java.src.dir" value="src/java"/>
  <property name="test.src.dir" value="src/test"/>
  <property name="conf.dir" value="src/conf"/>
  <property name="descriptor.dir" value="src/descriptor"/>
  <property name="target.dir" value="target"/>
  <property name="classes.dir" value="${target.dir}/classes"/>
  <property name="test.classes.dir" value="${target.dir}/test-classes"/>
  <property name="example.jar" value="${target.dir}/gaderian-examples.jar"/>
  <property name="lib.dir" value="lib"/>
  <property name="junit.temp.dir" value="${target.dir}/junit-temp"/>
  <property name="junit.reports.dir" value="${target.dir}/junit-reports"/>

  <path id="build.class.path">
    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <path id="test.build.class.path">
    <path refid="build.class.path"/>
    <path location="${classes.dir}"/>
  </path>

  <path id="run.class.path">
    <path refid="build.class.path"/>
    <pathelement location="${classes.dir}"/>
    <pathelement location="${descriptor.dir}"/>
    <pathelement location="${conf.dir}"/>
  </path>

  <path id="test.run.class.path">
    <path refid="run.class.path"/>
    <path location="${test.classes.dir}"/>
  </path>

  <target name="clean" description="Delete all derived files.">
    <delete dir="${target.dir}" quiet="true"/>
  </target>

  <target name="compile" description="Compile all Java code.">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${java.src.dir}" destdir="${classes.dir}" classpathref="build.class.path"/>
  </target>

  <target name="compile-tests" description="Compile test classes." depends="compile">
    <mkdir dir="${test.classes.dir}"/>
    <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" classpathref="test.build.class.path"/>
  </target>

  <target name="run-tests" description="Run unit tests." depends="compile-tests">

    <mkdir dir="${junit.temp.dir}"/>
    <mkdir dir="${junit.reports.dir}"/>

    <junit haltonfailure="off" failureproperty="junit-failure" tempdir="${junit.temp.dir}">
      <classpath refid="test.run.class.path"/>

      <formatter type="xml"/>
      <formatter type="plain"/>
      <formatter type="brief" usefile="false"/>

      <batchtest todir="${junit.reports.dir}">
        <fileset dir="${test.classes.dir}">
          <include name="**/Test*.class"/>
        </fileset>
      </batchtest>
    </junit>

    <fail if="junit-failure" message="Some tests failed."/>

  </target>

  <target name="jar" description="Construct the JAR file." depends="compile,run-tests">
    <jar destfile="${example.jar}">
      <fileset dir="${classes.dir}"/>
    <fileset dir="${descriptor.dir}"/>
    </jar>
  </target>

  <target name="run" depends="compile" description="Run the Adder service.">
    <java classname="gaderian.examples.Main" classpathref="run.class.path" fork="true">
      <arg value="11"/>
      <arg value="23"/>
    </java>
  </target>

</project>]]>
</source>
      <p>The important part is to package both the classes and the Gaderian
        module deployment descriptor into the JAR.</p>
      <p>The only other oddity was to add <code>src/conf</code> to the runtime
        classpath; this is to include the <code>log4j.properties</code>
        configuration file; otherwise Log4J will write console errors about
        missing configuration.</p>
    </section>

    <section name="Running the Examples">

<source>
bash-2.05b$ ant run
Buildfile: build.xml

compile:
    [mkdir] Created dir: C:\workspace\gaderian-example\target\classes
    [javac] Compiling 15 source files to C:\workspace\gaderian-example\target\classes

run:
     [java] Inputs 11 and 23
     [java] Add     : 34
     [java] Subtract: -12
     [java] Multiply: 253
     [java] Divide  : 0



BUILD SUCCESSFUL
Total time: 3 seconds
</source>
    </section>
  </body>
</document>
