<?xml version="1.0"?>
<!--
   Copyright 2004, 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<document xmlns="http://maven.apache.org/XDOC/2.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
    <properties>
        <title>Gaderian Multi-Threading</title>
    </properties>
    <body>
        <section name="Gaderian Multi-Threading">
            <p>Gaderian is specifically targetted for J2EE: deployment in a WAR or EAR, but of course, J2EE is
                not a requirement, and Gaderian is quite useful even in a simple, standalone environment.
            </p>
            <p>In the world of J2EE, multi-threading is always an issue. Gaderian
                services are usually singletons, and must be prepared to operate in a
                multi-threaded environment. That means services should not have any
                specific state, much like a servlet.
            </p>
        </section>

        <section name="Construction State">

            <p>Gaderian expects that initially, work will progress in a single startup
                thread. This is the early state, the construction state, where the
                module deployment descriptors are located and parsed, and the contents
                used to assemble the registry; this is the domain of
                <a href="gaderian/apidocs/org/ops4j/gaderian/impl/RegistryBuilder.html">RegistryBuilder</a>
                .
            </p>

            <p>The construction activities are not thread-safe. This includes the
                parser, and other code (virtually all of which is hidden from your
                application).
            </p>

            <p>The construction state ends when the
                <code>RegistryBuilder</code>
                returns the
                <a href="gaderian/apidocs/org/ops4j/gaderian/Registry.html">Registry</a>
                from method<code>constructRegistry()</code>.
                The returned registry is thread-safe.
            </p>

        </section>

        <section name="Runtime State">
            <p>Everything that occurs with the Registry and modules must be
                thread-safe. Key methods are always synchronized. In particular, the
                methods that construct a service and construct configuration point
                elements are thread-safe. Operations such as building the interceptor
                stack, instantiating core service implementations, and converting XML to
                Java objects operate in a thread-safe manner. However, different threads
                may be building different services simultaneously. This means that, for
                example, an interceptor service implementation must still be
                thread-safe, since it may be called upon to generate interceptors for
                two or more different services simultaneously.
            </p>

            <p>On the other hand, the Java objects constructed from XML
                <a href="descriptor.html#rules">&lt;rules&gt;</a>
                don't
                need to be thread-safe, since that construction is synchronized properly
                ... only a single thread will be converting XML to Java objects for any
                single configuration point.
            </p>
        </section>
        <section name="Managing Service State">

            <p>When services simply must maintain state <em>between</em>
                method invocations, there are several good options:
            </p>

            <ul>
                <li>Store the data in an object passed to or returned from the service</li>
                <li>Make use of the
                    <a href="gaderian/ThreadLocalStorage.html">gaderian.ThreadLocalStorage</a>
                    service to store the
                    data in a thread-local map.
                </li>
                <li>Make use of the <a href="services.html#Threaded Service Model">threaded</a>
                    or
                    <a href="services.html#Pooled Service Model">pooled</a> service models, which
                    allow a service to keep its state between service method invocations.
                </li>
            </ul>
        </section>
    </body>
</document>
